// Code generated by ent, DO NOT EDIT.

package ent

import (
	"books/ent/book"
	"books/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks     []Hook
	mutation  *BookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookUpdate) SetUpdatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// ClearTitle clears the value of the "title" field.
func (bu *BookUpdate) ClearTitle() *BookUpdate {
	bu.mutation.ClearTitle()
	return bu
}

// SetAuthor sets the "author" field.
func (bu *BookUpdate) SetAuthor(s string) *BookUpdate {
	bu.mutation.SetAuthor(s)
	return bu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAuthor(s *string) *BookUpdate {
	if s != nil {
		bu.SetAuthor(*s)
	}
	return bu
}

// ClearAuthor clears the value of the "author" field.
func (bu *BookUpdate) ClearAuthor() *BookUpdate {
	bu.mutation.ClearAuthor()
	return bu
}

// SetPublicationYear sets the "publication_year" field.
func (bu *BookUpdate) SetPublicationYear(t time.Time) *BookUpdate {
	bu.mutation.SetPublicationYear(t)
	return bu
}

// SetIsDeleted sets the "is_deleted" field.
func (bu *BookUpdate) SetIsDeleted(b bool) *BookUpdate {
	bu.mutation.SetIsDeleted(b)
	return bu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (bu *BookUpdate) SetNillableIsDeleted(b *bool) *BookUpdate {
	if b != nil {
		bu.SetIsDeleted(*b)
	}
	return bu
}

// ClearIsDeleted clears the value of the "is_deleted" field.
func (bu *BookUpdate) ClearIsDeleted() *BookUpdate {
	bu.mutation.ClearIsDeleted()
	return bu
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BookUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := book.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	if _, ok := bu.mutation.PublicationYear(); !ok {
		v := book.UpdateDefaultPublicationYear()
		bu.mutation.SetPublicationYear(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BookUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if bu.mutation.TitleCleared() {
		_spec.ClearField(book.FieldTitle, field.TypeString)
	}
	if value, ok := bu.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if bu.mutation.AuthorCleared() {
		_spec.ClearField(book.FieldAuthor, field.TypeString)
	}
	if value, ok := bu.mutation.PublicationYear(); ok {
		_spec.SetField(book.FieldPublicationYear, field.TypeTime, value)
	}
	if value, ok := bu.mutation.IsDeleted(); ok {
		_spec.SetField(book.FieldIsDeleted, field.TypeBool, value)
	}
	if bu.mutation.IsDeletedCleared() {
		_spec.ClearField(book.FieldIsDeleted, field.TypeBool)
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BookMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookUpdateOne) SetUpdatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetTitle sets the "title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// ClearTitle clears the value of the "title" field.
func (buo *BookUpdateOne) ClearTitle() *BookUpdateOne {
	buo.mutation.ClearTitle()
	return buo
}

// SetAuthor sets the "author" field.
func (buo *BookUpdateOne) SetAuthor(s string) *BookUpdateOne {
	buo.mutation.SetAuthor(s)
	return buo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAuthor(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAuthor(*s)
	}
	return buo
}

// ClearAuthor clears the value of the "author" field.
func (buo *BookUpdateOne) ClearAuthor() *BookUpdateOne {
	buo.mutation.ClearAuthor()
	return buo
}

// SetPublicationYear sets the "publication_year" field.
func (buo *BookUpdateOne) SetPublicationYear(t time.Time) *BookUpdateOne {
	buo.mutation.SetPublicationYear(t)
	return buo
}

// SetIsDeleted sets the "is_deleted" field.
func (buo *BookUpdateOne) SetIsDeleted(b bool) *BookUpdateOne {
	buo.mutation.SetIsDeleted(b)
	return buo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableIsDeleted(b *bool) *BookUpdateOne {
	if b != nil {
		buo.SetIsDeleted(*b)
	}
	return buo
}

// ClearIsDeleted clears the value of the "is_deleted" field.
func (buo *BookUpdateOne) ClearIsDeleted() *BookUpdateOne {
	buo.mutation.ClearIsDeleted()
	return buo
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BookUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := book.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	if _, ok := buo.mutation.PublicationYear(); !ok {
		v := book.UpdateDefaultPublicationYear()
		buo.mutation.SetPublicationYear(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BookUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if buo.mutation.TitleCleared() {
		_spec.ClearField(book.FieldTitle, field.TypeString)
	}
	if value, ok := buo.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if buo.mutation.AuthorCleared() {
		_spec.ClearField(book.FieldAuthor, field.TypeString)
	}
	if value, ok := buo.mutation.PublicationYear(); ok {
		_spec.SetField(book.FieldPublicationYear, field.TypeTime, value)
	}
	if value, ok := buo.mutation.IsDeleted(); ok {
		_spec.SetField(book.FieldIsDeleted, field.TypeBool, value)
	}
	if buo.mutation.IsDeletedCleared() {
		_spec.ClearField(book.FieldIsDeleted, field.TypeBool)
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
